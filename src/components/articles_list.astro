---
// 类型定义
interface BlogPost {
  date: string;
  guid: {
    rendered: string;
  };
  title: {
    rendered: string;
  };
}

interface ApiItem {
  name: string;
  url: string;
  description?: string;
}

interface ServiceGroup {
  title: string;
  url: string;
  apis: Array<{
    title: string;
    url: string;
    state?: string;
    description?: string;
  }>;
}

const fetchBlogData = async () => {
  try {
    const response = await fetch(
      "https://blog.cloverta.top/wp-json/wp/v2/posts?page=1&per_page=20",
      {
        headers: {
          "Cache-Control": "max-age=60",
        },
      },
    );
    if (!response.ok) throw new Error("博客数据请求失败");
    const rawData = (await response.json()) as BlogPost[];
    return rawData.map((post) => ({
      ...post,
      date: post.date.split("T")[0],
    }));
  } catch (error) {
    console.error("博客数据加载失败:", error);
    return [
      {
        title: { rendered: "文章加载失败" },
        guid: { rendered: "#" },
        date: "NA",
      },
    ];
  }
};

const fetchApiData = async () => {
  try {
    const response = await fetch("https://api.cloverta.top/list", {
      headers: {
        "Cache-Control": "max-age=30",
      },
    });
    if (!response.ok) throw new Error("API数据请求失败");
    return (await response.json()) as ApiItem[];
  } catch (error) {
    console.error("API数据加载失败:", error);
    return [
      {
        name: "接口加载失败",
        url: null,
        description: "请稍后重试",
      },
    ];
  }
};

// 主逻辑
let apiList: ServiceGroup[];

try {
  // 并行请求（各自包含错误处理）
  const [blogData, apiData] = await Promise.all([
    fetchBlogData(),
    fetchApiData(),
  ]);

  // 组装最终数据
  apiList = [
    {
      title: "文章",
      url: "https://blog.cloverta.top/",
      apis: blogData.map((post) => ({
        title: post.title.rendered,
        url: post.guid.rendered || "#",
        state: post.date,
      })),
    },
    {
      title: "API",
      url: "https://doc.cloverta.top/",
      apis: apiData.map((item) => ({
        title: item.name,
        url: item.url || "#",
        state: item.url ? "OK" : "NA",
        description: item.description,
      })),
    },
  ];
} catch (error) {
  console.error("意外的全局错误:", error);
  // 完全独立的降级方案
  apiList = [
    {
      title: "文章",
      url: "https://blog.cloverta.top/",
      apis: [{ title: "系统错误", url: "#", state: "NA" }],
    },
    {
      title: "API",
      url: "https://api.cloverta.top/",
      apis: [{ title: "系统错误", url: "#", state: "NA" }],
    },
  ];
}
---

<div
  class="card max-lg:card-compact rounded-2xl shadow-xl shadow-accent hover:bg-primary-focus hover:shadow-gray-500 bg-primary w-full lg:w-[54rem] min-h-[26rem] mb-8"
>
  <div class="card-body">
    <div class="tabs tabs-boxed rounded-xl max-sm:py-2">
      {
        apiList.map((content, index) => (
          <div class="max-sm:px-2 tab tab-sm md:tab-lg" data-tab-index={index}>
            {content.title}
          </div>
        ))
      }
    </div>

    {
      apiList.map((articles, index) => (
        <div
          class={`tab-content ${index === 0 ? "block" : "hidden"}`}
          data-tab-index={index}
        >
          {articles.apis.map((article) => (
            <a
              class="card card-compact rounded-xl bg-neutral mt-2 hover:bg-base-300"
              href={article.url}
              target="_blank"
            >
              <div
                class="card-body"
                style="font-family: system-ui, sans-serif;"
              >
                <div class="text-base md:text-xl sm:flex sm:justify-between">
                  {article.title}
                  <div class="inline-block float-right text-gray-500">
                    {article.state}
                  </div>
                </div>
              </div>
            </a>
          ))}

          <div class="pt-2" />

          <div class="card-actions justify-end">
            <a
              class="btn btn-md btn-wide rounded-xl capitalize border-0 max-w-full text-xl"
              href={articles.url}
              target="_blank"
            >
              查看更多
            </a>
          </div>
        </div>
      ))
    }
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const tabs = document.querySelectorAll(".tab");
    const contents = document.querySelectorAll(".tab-content");

    function setActiveTab(index: number) {
      tabs.forEach((tab, i) => {
        if (i === index) {
          tab.classList.add("tab-active");
        } else {
          tab.classList.remove("tab-active");
        }
      });

      contents.forEach((content, i) => {
        if (i === index) {
          content.classList.remove("hidden");
          content.classList.add("block");
        } else {
          content.classList.add("hidden");
          content.classList.remove("block");
        }
      });
    }

    tabs.forEach((tab) => {
      tab.addEventListener("click", () => {
        const index = parseInt(tab.getAttribute("data-tab-index"));
        setActiveTab(index);
      });
    });

    setActiveTab(0);
  });
</script>
